/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainApp.java
 *
 * Created on Jun 2, 2013, 7:29:28 PM
 */

package banknotes;


import java.awt.FileDialog;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.*;
import javax.imageio.ImageIO;
import sun.awt.image.ToolkitImage;

/**
 *
 * @author user
 */
public class MainApp extends javax.swing.JFrame {
    private BufferedImage bimage;

  
	static double[] histogram = new double[256];
	BufferedImage image;
        int[][] imageMatrix;
	static BufferedImage grayImage;
	ImageIcon o;
	JLabel original = new JLabel();
	JTextArea jta;
        JMenuBar jmb;
        int height,width;

    protected static final int ERODE=0,DILATE=1,OPEN=2,CLOSE=3;
	protected static int Choice;
    private BufferedImage old;
    private String textname;
    private File file;
    /** Creates new form MainApp */
    public MainApp() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Preprocessing = new javax.swing.JMenu();
        Threshold = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        Ratio = new javax.swing.JMenuItem();
        Negative = new javax.swing.JMenuItem();
        Log = new javax.swing.JMenuItem();
        Mean = new javax.swing.JMenuItem();
        Median = new javax.swing.JMenuItem();
        LBC = new javax.swing.JMenuItem();
        HistEquls = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        Dilation = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Classify Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Histogram");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setForeground(new java.awt.Color(51, 0, 51));

        jButton4.setBackground(new java.awt.Color(153, 153, 153));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("INPUT");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("OUTPUT");
        jLabel2.setToolTipText("");

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        Threshold.setText("Threshold");
        Threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThresholdActionPerformed(evt);
            }
        });
        Preprocessing.add(Threshold);

        jMenu2.add(Preprocessing);

        jMenu4.setText("Enhancement");

        Ratio.setText("Ratio Image");
        Ratio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RatioActionPerformed(evt);
            }
        });
        jMenu4.add(Ratio);

        Negative.setText("Negative");
        Negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeActionPerformed(evt);
            }
        });
        jMenu4.add(Negative);

        Log.setText("Log");
        Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogActionPerformed(evt);
            }
        });
        jMenu4.add(Log);

        Mean.setText("Mean Filter");
        Mean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeanActionPerformed(evt);
            }
        });
        jMenu4.add(Mean);

        Median.setText("Median Filter");
        Median.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedianActionPerformed(evt);
            }
        });
        jMenu4.add(Median);

        LBC.setText("Local Binary Coding");
        LBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LBCActionPerformed(evt);
            }
        });
        jMenu4.add(LBC);

        HistEquls.setText("Histogram Equalisation");
        HistEquls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistEqulsActionPerformed(evt);
            }
        });
        jMenu4.add(HistEquls);

        jMenu2.add(jMenu4);

        jMenu5.setText("Segmentation");
        jMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu5ActionPerformed(evt);
            }
        });

        Dilation.setText("Dilation");
        Dilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DilationActionPerformed(evt);
            }
        });
        jMenu5.add(Dilation);

        jMenuItem5.setText("Point Detect");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setText("Erosion");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem7.setText("Sobel");
        jMenu5.add(jMenuItem7);

        jMenu2.add(jMenu5);

        jMenuItem4.setText("Extract features");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem1.setText("About");
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton2)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton1)))
                    .add(layout.createSequentialGroup()
                        .add(37, 37, 37)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(110, 110, 110)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton1))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 227, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(37, 37, 37)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jButton2)
                        .add(76, 76, 76)
                        .add(jLabel2)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int[][] getImageMatrix(BufferedImage bimage,int[][] imageMatrix){
        imageMatrix = new int[bimage.getWidth()][bimage.getHeight()];
        for(int i=0;i<bimage.getWidth();i++){
            for(int j=0;j<bimage.getHeight();j++){
                imageMatrix[i][j] = getARGBPixelData(bimage.getRGB(i, j));
                
                //System.out.print(imageMatrix[i][j]+" ");
            }
           // System.out.println();

        }
        return imageMatrix;
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            // TODO add your handling code here:
            FileDialog file = new FileDialog(new JFrame(), "select image");
            file.show();
            String path = file.getDirectory() + file.getFile();
            String dir = path.replace('\\', '/');
            this.file = new File(dir);
            textname=file.getFile();
            System.out.println(dir);
            image = ImageIO.read(new File(dir));
            grayImage=(BufferedImage)convertToGrayscale(image);
            BufferedImage bufd = (BufferedImage) grayImage;
            height = bufd.getHeight();
            width = bufd.getWidth();
            imageMatrix = getImageMatrix(bufd, imageMatrix);

            ImageIcon icn = new ImageIcon(dir);
            jButton3.setIcon(icn);
            ImageIcon icon2 = new ImageIcon(grayImage);
            jButton4.setIcon(icon2);
            
            Runtime.getRuntime().exec("echo 'find me hehehe'");

        } catch (IOException ex) {
            Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
 class histogramPanel extends JPanel{

		private static final long serialVersionUID = 1L;

		public void paintComponent(Graphics g){
			super.paintComponent(g);
			int widgth =  getWidth();
			int heght = getHeight();

			//mageIcon imageIcon;
			int [] histogrm =histogram1 (grayImage);
			//Histogram hs = new Histogram();

			//int [] newHistogram = hs.histogram(histogrmArray,  grayImage.getWidth(this),  grayImage.getHeight(this));

			//Image img = getImageFromArray(newHistogram,grayImage.getWidth(this), grayImage.getHeight(this));
			//g.drawImage(img, 0, 0, getWidth(), getHeight(), this);

			int x=2;
			for(int i =0;i<histogrm.length;i++){
				//if(histogrm[i]>heght)
					//histogrm[i]=heght-3;
				g.drawLine(x+1,heght-histogrm[i], x+1, heght);
				g.drawLine(x+2,heght-histogrm[i], x+2, heght);
				g.drawLine(x+3,heght-histogrm[i], x+3, heght);
				x+=4;
			}


		}
    }
 public  int  [] histogram1 (Image img){
	BufferedImage getr = (BufferedImage)(grayImage);
	int [] histogram = new int[256];
	for(int i=0; i<img.getWidth(this); i++){
		for(int j=0; j<img.getHeight(this); j++){
			histogram[getr.getRGB(i, j)& 255] += 1.0;
		}
	}
	return histogram;
}
 public double imageMean(Image img){

	  int imgCols = img.getWidth(this);
	  int imgRows = img.getHeight(this);
	  BufferedImage getr = (BufferedImage)(grayImage);
	    //Get Pixels
	  int [] rgbs = new int[imgCols*imgRows];

	  getr.getRGB(0, 0, imgCols, imgRows, rgbs, 0, imgCols); //Get all pixels
	  int mean=0;
	    //find the mean
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	      int alpha = (color >> 24) & 255;
	      int red = (color >> 16) & 255;
	      int green = (color >> 8) & 255;
	      int blue = (color) & 255;

	      int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
	      mean+=lum;
	   }
	}

	    mean = mean/(imgCols*imgRows);
	   // System.out.println("mean"+mean);

	return mean;
}
 public Image binariseImage2(Image img){
	// imgCols = rawImg.getWidth(this);
	  int imgCols = img.getWidth(this);
	  int imgRows = img.getHeight(this);
	   System.out.println(imgCols);
	   System.out.println(imgRows);

	BufferedImage getr = (BufferedImage)(grayImage);
	//Get Pixels
	int [] rgbs = new int[imgCols*imgRows];

	getr.getRGB(0, 0, imgCols, imgRows, rgbs, 0, imgCols); //Get all pixels
	int mean=0;
	//find the mean
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	       int alpha = (color >> 24) & 255;
	        int red = (color >> 16) & 255;
	         int green = (color >> 8) & 255;
	         int blue = (color) & 255;

	  int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
	    mean+=lum;
	   }
	}

	mean = mean/(imgCols*imgRows);
	System.out.println("mean"+mean);
	//binarise using mean
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	       int alpha = (color >> 24) & 255;
	        int red = (color >> 16) & 255;
	         int green = (color >> 8) & 255;
	         int blue = (color) & 255;

	  int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
	     if(lum > mean )
	    	 lum =0;
	     else lum =255;
	       alpha = (alpha << 24);
	        red = (lum << 16);
	         green = (lum << 8);
	          blue = lum;
	           color = alpha + red + green + blue;
	        getr.setRGB(i,j,color);
	//int [][] binaryMatrix = new int [imgRows][imgCols];

		}
	}
	return getr;

}

public Image makeNegativeImage(Image img){
	BufferedImage getr = (BufferedImage)(grayImage);
	// imgCols = rawImg.getWidth(this);
	  int imgCols = img.getWidth(this);
	  int imgRows = img.getHeight(this);
	   System.out.println(imgCols);
	   System.out.println(imgRows);


	//Get Pixels
	int [] rgbs = new int[imgCols*imgRows];

	getr.getRGB(0, 0, imgCols, imgRows, rgbs, 0, imgCols); //Get all pixels
	int mean=0;
	//find the mean
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	       int alpha = (color >> 24) & 255;
	        int red = (color >> 16) & 255;
	         int green = (color >> 8) & 255;
	         int blue = (color) & 255;

	  int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
          lum = 256-lum;
          alpha = (alpha << 24);
	        red = (lum << 16);
	         green = (lum << 8);
	          blue = lum;
	           color = alpha + red + green + blue;
	        getr.setRGB(i,j,color);
	   }
	}
	return getr;
}
public Image Logarithmic(Image img){
	BufferedImage getr = (BufferedImage)(grayImage);
	// imgCols = rawImg.getWidth(this);
	  int imgCols = img.getWidth(this);
	  int imgRows = img.getHeight(this);
	   System.out.println(imgCols);
	   System.out.println(imgRows);


	//Get Pixels
	int [] rgbs = new int[imgCols*imgRows];

	getr.getRGB(0, 0, imgCols, imgRows, rgbs, 0, imgCols); //Get all pixels
	int mean=0;
	//find the mean
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	      int alpha = (color >> 24) & 255;
	      int red = (color >> 16) & 255;
	      int green = (color >> 8) & 255;
	      int blue = (color) & 255;

	  int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
	//int   s = (int) (15*Math.log(1 + lum));
	int   s = (int) (lum * Math.exp(0.3));

          lum = s;
          alpha = (alpha << 24);
	      red = (lum << 16);
	       green = (lum << 8);
	       blue = lum;
	       color = alpha + red + green + blue;
	        getr.setRGB(i,j,color);
	   }
	}
	return getr;
}

public BufferedImage power(Image image){
	BufferedImage bim = (BufferedImage)image;
	//Image im;
	double gamma;
	double  gammaValues [] ={0.6,0.5 ,0.4, 0.3 , 0.2 , 0.1 , 1.0 , 2.0 , 3.0 , 4.0 ,5.0,6.0};
	Object[] rateList = new Object[12];
	rateList[0]=new Double(gammaValues[0]);
	rateList[1]=new Double(gammaValues[1]);
	rateList[2]=new Double(gammaValues[2]);
	rateList[3]=new Double(gammaValues[3]);
	rateList[4]=new Double(gammaValues[4]);
	rateList[5]=new Double(gammaValues[5]);
	rateList[6]=new Double(gammaValues[6]);
	rateList[7]=new Double(gammaValues[7]);
	rateList[8]=new Double(gammaValues[8]);
	rateList[9]=new Double(gammaValues[9]);
	rateList[10]=new Double(gammaValues[10]);
	rateList[11]=new Double(gammaValues[11]);
	Object gammaRateObject =JOptionPane.showInputDialog(null, "Select gamma  rate:", "JOptionPaneDemo",
			JOptionPane.QUESTION_MESSAGE, null, rateList, null);
	        gamma = ((Double)gammaRateObject).doubleValue();

	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)(Math.pow(((double)(bim.getRGB(i, j)&255)/255.0),gamma)*255.0);
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	//im = bim;
	return bim;
}
public BufferedImage log(Image image){
	BufferedImage bim = (BufferedImage)image;
	//Image im;
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)(Math.log((1+(double)(bim.getRGB(i, j)&255)/255.0))*255.0);
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	//im = bim;
	return bim;
}

public BufferedImage median(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	int[][] filtered = new int[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	//System.out.println(bim.getHeight()+"x"+bim.getWidth());
	//System.out.println(bim.getRGB(512-1, 433-1));
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	int[] m = new int[9];
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			m[0] = padded[r][c];
			m[1] = padded[r][c-1];
			m[2] = padded[r][c+1];
			m[3] = padded[r-1][c];
			m[4] = padded[r+1][c];
			m[5] = padded[r-1][c-1];
			m[6] = padded[r-1][c+1];
			m[7] = padded[r+1][c-1];
			m[8] = padded[r+1][c+1];
			for(int k=1; k<m.length; k++){
				for(int i=0; i<m.length-k; i++){
					if(m[i]>m[i+1]);
					int temp = m[i];
					m[i] = m[i+1];
					m[i+1] = temp;
				}
			}
			filtered[r-1][c-1] = m[4];
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage mean(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	int[][] filtered = new int[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	int[] m = new int[9];
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			m[0] = padded[r][c];
			m[1] = padded[r][c-1];
			m[2] = padded[r][c+1];
			m[3] = padded[r-1][c];
			m[4] = padded[r+1][c];
			m[5] = padded[r-1][c-1];
			m[6] = padded[r-1][c+1];
			m[7] = padded[r+1][c-1];
			m[8] = padded[r+1][c+1];
			int sum = 0;
			for(int k=0; k<m.length; k++){
				sum+=m[k];
			}
			filtered[r-1][c-1] = sum/9;
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage pointDetection(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	int[] m = {8, -1, -1, -1, -1, -1, -1, -1, -1};
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			double sum = m[0] * padded[r][c]+
			m[1] * padded[r][c-1]+
			m[2] * padded[r][c+1]+
			m[3] * padded[r-1][c]+
			m[4] * padded[r+1][c]+
			m[5] * padded[r-1][c-1]+
			m[6] * padded[r-1][c+1]+
			m[7] * padded[r+1][c-1]+
			m[8] * padded[r+1][c+1];

			filtered[r-1][c-1] = sum;
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = 0;
			if(filtered[i][j]==0){
				lum=255;
			}
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage embossed(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	double[] histogram1 = new double[256];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			histogram1[bim.getRGB(i, j)& 255] += 1.0;
		}
	}
	int min = 0;
	int max = 255;
	int[] m = {0, 1, -1, 1, -1, 2, 0, 0, 2};
//	int[] m = {-1, -2,- 1, 0, 0, 0, 1, 2, 1};

	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			double sum = m[0] * padded[r][c]+
			m[1] * padded[r][c-1]+
			m[2] * padded[r][c+1]+
			m[3] * padded[r-1][c]+
			m[4] * padded[r+1][c]+
			m[5] * padded[r-1][c-1]+
			m[6] * padded[r-1][c+1]+
			m[7] * padded[r+1][c-1]+
			m[8] * padded[r+1][c+1];

			filtered[r-1][c-1] = 255*((sum-min)/(max-min));
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage LBC(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			int s = 0;
			if(padded[r-1][c]>=original[r][c]){
				s+=128;
			}
			else s+=0;
			if(padded[r-1][c+1]>=original[r][c]){
				s+=64;
			}
			else s+=0;
			if(padded[r][c+1]>=original[r][c]){
				s+=32;
			}
			else s+=0;
			if(padded[r+1][c+1]>=original[r][c]){
				s+=16;
			}
			else s+=0;
			if(padded[r+1][c]>=original[r][c]){
				s+=8;
			}
			else s+=0;
			if(padded[r+1][c-1]>=original[r][c]){
				s+=4;
			}
			else s+=0;
			if(padded[r][c-1]>=original[r][c]){
				s+=2;
			}
			else s+=0;
			if(padded[r-1][c-1]>=original[r][c]){
				s+=1;
			}
			else s+=0;
			filtered[r-1][c-1] = s;
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage ratio(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			int one=0;
			int two=0;
			int three=0;
			int four=0;
			if((padded[r][c+1]==0)|(original[r-1][c-1]==0)|(padded[r][c+1]==0 && original[r-1][c-1]==0))
				one = 0;
			else
			one = (int)Math.max((double)padded[r][c+1]/(double)original[r-1][c-1], (double)original[r-1][c-1]/(double)padded[r][c+1]);

			if((padded[r][c-1]==0)|(original[r-1][c-1]==0)|(padded[r][c-1]==0 && original[r-1][c-1]==0))
				one = 0;
			else
			one = (int)Math.max((double)padded[r][c-1]/(double)original[r-1][c-1], (double)original[r-1][c-1]/(double)padded[r][c-1]);

			if((padded[r+1][c]==0)|(original[r-1][c-1]==0)|(padded[r+1][c]==0 && original[r-1][c-1]==0))
				one = 0;
			else
			one = (int)Math.max((double)padded[r+1][c]/(double)original[r-1][c-1], (double)original[r-1][c-1]/(double)padded[r+1][c]);

			if((padded[r-1][c]==0)|(original[r-1][c-1]==0)|(padded[r-1][c]==0 && original[r-1][c-1]==0))
				one = 0;
			else
			one = (int)Math.max((double)padded[r-1][c]/(double)original[r-1][c-1], (double)original[r-1][c-1]/(double)padded[r-1][c]);
			filtered[r-1][c-1] = ((one+two+three+four)*255)/4;
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}
public BufferedImage erosionDelationOpenClose(Image image){ ///////////////////////////////////////////////////////////////
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	//byte[][] padded = new byte[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] =(byte) original[i][j];
		}
	}

int index;
	int h=bim.getHeight();
	int w=bim.getWidth();
	ArrayList<Byte> pixels = new ArrayList<Byte>();
	ArrayList<Byte> remain = new ArrayList<Byte>();
	for(int r=0;r<w;r++){
		for(int c=0;c<h;c++){
			pixels.add((byte)padded[r][c] );
		}

	}

	if (Choice==ERODE) {
		System.out.println("ERODE");
		 // pixels =	invert(pixels);
		 // pixels  = invert(pixels);
		//Erosion  erode = new Erosion(1);
		// bim = erode.apply(bim);
		 // remain = doFilter2 (pixels) ;

		  //remain = invert(remain);
		  //remain = doFilter (pixels) ;
		  //remain = invert(remain);
		  }
	else  if (Choice==DILATE) {
		System.out.println("DILATE");
		 //  pixels =	invert(pixels);
			remain = doFilter (pixels) ;
			//remain = invert(remain);
		   // pixels =	invert(pixels);
	}
	else if (Choice==OPEN){
		System.out.println("OPEN");
		remain = doFilter (pixels) ;
		for (int y=1; y<(h-1); y++) {
			for (int x=1; x<(w-1); x++) {
				index=x+y*w;
				pixels.add(index,remain.get(index));
			}
		}
		pixels =	invert(pixels);
		remain = doFilter (pixels) ;
		remain = invert(remain);
		//pixels =	invert(pixels);
	}

	else if (Choice==CLOSE){
		System.out.println("CLOSE");
		pixels =	invert(pixels);
		remain = doFilter (pixels) ;
		remain = invert(remain);
		///pixels =	invert(pixels);
		for (int y=1; y<(h-1); y++) {
			for (int x=1; x<(w-1); x++) {
				index=x+y*w;
				pixels.add(index,remain.get(index));
			}
		}
		remain = doFilter (pixels) ;
	}

	//remain = doFilter (pixels) ;

		for(int i=0;i<w;i++){
			for(int j =0;j<h;j++){
				filtered[i][j]=remain.get(0);
				remain.remove(0);
			}

		}



	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}
public ArrayList<Byte> doFilter2(ArrayList<Byte> pixels){
	// Eroding
	ArrayList<Byte> remain = (ArrayList<Byte>) pixels.clone();
	BufferedImage bim = (BufferedImage)grayImage;
	int h=bim.getHeight();
	int w=bim.getWidth();
	int index,sum;
	int p1,p2,p3,p4,p5,p6,p7,p8,p9;
	//Correct the number of required neighborhood black pixels
   int  pixelCount = 8;
	int pixelThreshold = (2040-255*pixelCount);
	pixelThreshold = (255*pixelCount);
	//nIterations = (int)gd.getNextNumber();
//	for (j=0;j<nIterations;j++){
		for (int y=1; y<(h-1); y++) {
			for (int x=1; x<(w-1); x++) {
				index=x+y*w;
				if(pixels.get(x)== 0){
					// Adding values around index
					p1=(pixels.get(index-w-1)&0xff); 	p2=(pixels.get(index-w)&0xff); 	p3=(pixels.get(index-w+1)&0xff);
					p4=(pixels.get(index-1)&0xff); 		p5=(pixels.get(index)&0xff);	p6=(pixels.get(index+1)&0xff);
					p7=(pixels.get(index+w-1)&0xff);	p8=(pixels.get(index+w)&0xff);	p9=(pixels.get(index+w+1)&0xff);
					sum =  p1 + p2 + p3 + p4 + p6 + p7 + p8+  p9;
				//System.out.println(sum);
					// Check if sum is higher than threshold
					if(sum >= pixelThreshold){remain.add(index, (byte)0) ; }
					else {remain.add(index, (byte)255) ;}
				}
				else {remain.add(index, (byte)255);}
			}
		//}


	}
		return remain;

}
public ArrayList<Byte> doFilter(ArrayList<Byte> pixels){
	// Eroding
	ArrayList<Byte> remain = (ArrayList<Byte>) pixels.clone();
	BufferedImage bim = (BufferedImage)grayImage;
	int h=bim.getHeight();
	int w=bim.getWidth();
	int index,sum;
	int p1,p2,p3,p4,p5,p6,p7,p8,p9;
	//Correct the number of required neighborhood black pixels
   int  pixelCount = 8;
	int pixelThreshold = (2040-255*pixelCount);
	pixelThreshold = (255*pixelCount);
	//nIterations = (int)gd.getNextNumber();
//	for (j=0;j<nIterations;j++){
		for (int y=1; y<(h-1); y++) {
			for (int x=1; x<(w-1); x++) {
				index=x+y*w;
				if(pixels.get(x)== 0){
					// Adding values around index
					p1=(pixels.get(index-w-1)&0xff); 	p2=(pixels.get(index-w)&0xff); 	p3=(pixels.get(index-w+1)&0xff);
					p4=(pixels.get(index-1)&0xff); 		p5=(pixels.get(index)&0xff);	p6=(pixels.get(index+1)&0xff);
					p7=(pixels.get(index+w-1)&0xff);	p8=(pixels.get(index+w)&0xff);	p9=(pixels.get(index+w+1)&0xff);
					sum =  p1 + p2 + p3 + p4 + p6 + p7 + p8+  p9;
				//System.out.println(sum);
					// Check if sum is higher than threshold
					if(sum >= pixelThreshold){remain.add(index, (byte)255) ; }
					else {remain.add(index, (byte)0) ;}
				}
				else {remain.add(index, (byte)255);}
			}
		//}


	}
		return remain;

}
public  	ArrayList<Byte>  invert(	ArrayList<Byte> pixels){
	BufferedImage bim = (BufferedImage)grayImage;
	int h = bim.getHeight();
	int w =bim.getWidth();
	//INVERT THE IMAGE FOR DILATION
	int index;
	ArrayList<Byte> pixels2 =(ArrayList<Byte>) pixels.clone();
	//for (int y=0; y<(h); y++) {
		for (int x=0; x<pixels.size(); x++) {
			//System.out.println("ERODE"+x);
			//index=x+y*w;
			//pixels[index]=(byte)(255-pixels[index]);
			pixels2.add(x, (byte)(255-pixels.get(x)));
		}
//	}
	return pixels2;

}
public BufferedImage erosion2(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	double[][] filtered = new double[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}

	int[] m = {0, 0, 0, 0, 0, 0, 0, 0, 0};
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			boolean test = false;
			if(m[0] == padded[r][c] && m[1] == padded[r][c-1] && m[2] == padded[r][c+1]
					&& m[3] == padded[r-1][c] && m[4] == padded[r+1][c] && m[5] == padded[r-1][c-1]
					&& m[6] == padded[r-1][c+1] && m[7] == padded[r+1][c-1] && m[8] == padded[r+1][c+1]){
				test = true;
			}
			if(test){
				filtered[r-1][c-1] = 255;
			}else filtered[r-1][c-1] = 0;
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = (int)filtered[i][j];
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage sobel(Image image){
	BufferedImage bim = (BufferedImage)image;
	int[][] original = new int[bim.getWidth()][bim.getHeight()];
	int[][] filtered = new int[bim.getWidth()][bim.getHeight()];
	int[][] padded = new int[bim.getWidth()+1][bim.getHeight()+1];
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			original[i][j] = bim.getRGB(i, j)&255;
			padded[i+1][j+1] = original[i][j];
		}
	}
	int[] m = {0, 0, 0, -2, 2, -1, -1, 1, 1};
	int[] n = {0, -2, 2, 0, 0, -1, 1, -1, 1};
	for(int r=1; r<bim.getWidth(); r++){
		for(int c=1; c<bim.getHeight(); c++){
			int sum1 = m[0] * padded[r][c]+
					m[1] * padded[r][c-1]+
					m[2] * padded[r][c+1]+
					m[3] * padded[r-1][c]+
					m[4] * padded[r+1][c]+
					m[5] * padded[r-1][c-1]+
					m[6] * padded[r-1][c+1]+
					m[7] * padded[r+1][c-1]+
					m[8] * padded[r+1][c+1];
			int sum2 = n[0] * padded[r][c]+
					n[1] * padded[r][c-1]+
					n[2] * padded[r][c+1]+
					n[3] * padded[r-1][c]+
					n[4] * padded[r+1][c]+
					n[5] * padded[r-1][c-1]+
					n[6] * padded[r-1][c+1]+
					n[7] * padded[r+1][c-1]+
					n[8] * padded[r+1][c+1];

			filtered[r-1][c-1] = (int)Math.sqrt((double)((sum1*sum1)+(sum2*sum2)));
		}
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int lum = 255;
			if(filtered[i][j]>35){
				lum=0;
			}
			int alpha = 255<<24;
			int red = lum<<16;
			int green = lum<<8;
			int blue = lum;
			int color = alpha+red+green+blue;
			bim.setRGB(i, j, color);
		}
	}
	return bim;
}

public BufferedImage histogramEqualisation(Image image){
	BufferedImage bim = (BufferedImage)image;
	//Image im;
	 histogram = new double[256];
	double n = bim.getHeight()*bim.getWidth();
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			histogram[bim.getRGB(i, j)& 0x000000FF] = histogram[bim.getRGB(i, j)& 0x000000FF]+1;
		}
	}
	double[] sumHistogram = new double[256];
	double sum = 0;
	int[] lut = new int[256];
	for(int i=0; i<256; i++){
		sum+=histogram[i];
		sumHistogram[i] = sum;
		lut[i] = (int)(sum*(255/n));
		//System.out.println(lut[i]);
	}
	for(int i=0; i<bim.getWidth(); i++){
		for(int j=0; j<bim.getHeight(); j++){
			int color=-1;
			int lum = lut[bim.getRGB(i, j)&255];
			int alpha = (255 << 24);
			int red = (lum << 16);
			int green = (lum << 8);
			int blue = lum;
			color = alpha + red + green + blue;
			bim.setRGB(i, j, color);
		}
	}
	//im = bim;
	return bim;
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

            		if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else{
            			 histogramPanel  hist = new histogramPanel();
            			DisplayHistogram histo = new DisplayHistogram();
            			histo.add(hist);
            			histo.setVisible(true);
            			//histo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            			histo.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            			}
            		 repaint();
            		System.out.println();


    }//GEN-LAST:event_jButton2ActionPerformed

    private void ThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThresholdActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = (BufferedImage)binariseImage1(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_ThresholdActionPerformed
public Image binariseImage1(Image img){
	// imgCols = rawImg.getWidth(this);
	  int imgCols = img.getWidth(this);
	  int imgRows = img.getHeight(this);
	   System.out.println(imgCols);
	   System.out.println(imgRows);

	BufferedImage getr = (BufferedImage)(grayImage);
	//Get Pixels
	int [] rgbs = new int[imgCols*imgRows];

	getr.getRGB(0, 0, imgCols, imgRows, rgbs, 0, imgCols); //Get all pixels
	for(int i=0; i<imgCols; i++){
		for(int j=0;j<imgRows;j++){
	      int color = getr.getRGB(i,j);
	       int alpha = (color >> 24) & 255;
	        int red = (color >> 16) & 255;
	         int green = (color >> 8) & 255;
	         int blue = (color) & 255;

	  int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
	     if(lum > 127 )
	    	 lum =255;
	     else lum =0;
	       alpha = (alpha << 24);
	        red = (lum << 16);
	         green = (lum << 8);
	          blue = lum;
	           color = alpha + red + green + blue;
	        getr.setRGB(i,j,color);
	//int [][] binaryMatrix = new int [imgRows][imgCols];

		}
	}
	return getr;
}
/**
	     * Image Pixels are Arrays of Integers [32 bits/4Bytes]
	     * Consider a 32 pixel as 11111111-00110011-00111110-00011110
	     *
	     * First Byte From Left [11111111]= Alpha
	     * Second Byte From Left[00110011]= Red
	     * Third Byte From Left [00111110]= Green
	     * Fourth Byte From Left[00011110]= Blue
	     *
	     * The following method will do a proper bit shift and
	     * logical AND operation to extract the correct values
	     * of different color/alpha components.
	     *
	     */
	    public static int getARGBPixelData(int pixel) {

	        /**
	         * Shift all pixels 16 bits to the right.
	         * Do a logical and with 0x000000FF
	         * i.e. 0000 0000 0000 0000 0000 0000 1111 1111
	         * You will get the red value for the pixel
	         */

	        int red = (pixel >> 16) & 0x000000FF;

	        /**
	         * Shift all pixels 8 bits to the right.
	         * Do a logical and with 0x000000FF
	         * i.e. 0000 0000 0000 0000 0000 0000 1111 1111
	         * You will get the green value for the pixel
	         */
	        int green = (pixel >>8 ) & 0x000000FF;

	        /**
	         * Dont do any shift.
	         * Do a logical and with 0x000000FF
	         * i.e. 0000 0000 0000 0000 0000 0000 1111 1111
	         * You will get the blue value for the pixel
	         */
	        int blue = (pixel) & 0x000000FF;

	        int gray = (red+green+blue)/3;

	        return gray;
	    }
    private void MeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeanActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = mean(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_MeanActionPerformed

    private void RatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RatioActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = ratio(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_RatioActionPerformed

    private void NegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = (BufferedImage)makeNegativeImage(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_NegativeActionPerformed

    private void DilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DilationActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else{
            			BufferedImage bim = (BufferedImage)grayImage;
            			Erosion  erode = new Erosion(1);
            			// bim = erode.apply(bim);

            			 grayImage =erode.apply(bim);;
                                  jButton4.setIcon(new ImageIcon(grayImage));

            		}
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_DilationActionPerformed

    private void LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = log(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_LogActionPerformed

    private void MedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedianActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = median(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_MedianActionPerformed

    private void LBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LBCActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = LBC(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_LBCActionPerformed

    private void HistEqulsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistEqulsActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = histogramEqualisation(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_HistEqulsActionPerformed

    private void jMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5ActionPerformed
private void converToDouble(int[][] ar1,double[][] ar2){
    for(int i=0;i<width;i++)
            for(int j=0;j<height;j++)
                ar2[i][j]=ar1[i][j];
}

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        old=new BufferedImage(grayImage.getHeight(),grayImage.getWidth(),BufferedImage.TYPE_INT_RGB);

        old=(BufferedImage) convertToGrayscale(image);



        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else{
            
          ScaleFilter filter= new ScaleFilter(300,150);
           filter.filter(old, grayImage);

        BufferedImage scale=((ToolkitImage)filter.scaleImage).getBufferedImage();

 CannyEdgeDetector cane = new CannyEdgeDetector();
        
        cane.setEdgesImage(scale);
        cane.setSourceImage(scale);
        cane.process();
        ImageIcon icn = new ImageIcon(cane.getEdgesImage());
              
        grayImage=cane.getEdgesImage();
        image=cane.getEdgesImage();
        jButton4.setIcon(new ImageIcon(grayImage));        
        repaint();
        Moments m = new Moments();
        double[] moments = m.computeInvariantMoments(grayImage);

        writeToFile(moments);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    
    public void writeToFile(double[] h){
         BufferedWriter out = null;
            try {
               
               textname = textname.replace(".jpg", "");
                System.out.println(textname);

                out = new BufferedWriter(new FileWriter(textname+".txt"));
                
                for(int i=0;i<h.length;i++){
                    System.out.println(h[i]);

                    out.write(""+h[i]+"\n");
                    out.newLine();
                }
                //dispFinds(finds);
            } catch (IOException ex) {
                Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
            }  
    }
  public String featureExtraction(double [][] matrix) {
        Moment[] moments1 = {new Moment("10NB", 0.001107660402632474),
            new Moment("10OB", 0.0010845729011290152),
            new Moment("10NF", 0.0011638873349490394),
            new Moment("10OF", 0.00109101724053715),
            new Moment("20NB", 0.0012243656914198403),
            new Moment("20OB", 0.0011004436929727118),
            new Moment("20NF", 0.0012531401296083187),
            new Moment("20OF", 0.0012073692021106314),
            new Moment("50NB", 0.0011741330375473749),
            new Moment("50OB", 0.001113823269087432),
            new Moment("50NF", 0.001225099999090904747),
            new Moment("50OF", 0.001168777067331055),
            new Moment("100NB", 0.0011896757784015497),
            new Moment("100OB", 0.0012266737193904727),
            new Moment("100NF", 0.0012169526641545583),
            new Moment("100OF", 0.0012355631748735831),
            new Moment("200NB", 0.001197896499406643),
            new Moment("200OB", 0.0011890474570548466),
            new Moment("200NF", 0.0012711292837390268),
            new Moment("200OF", 0.0012482613575669102)};

        Moment[] moments2 = {new Moment("10NB", 3.9965717072527673),
            new Moment("10OB", 3.996600776329155),
            new Moment("10NF", 3.9963290341268607),
            new Moment("10OF", 3.9966086542599792),
            new Moment("20NB", 3.996082117411459),
            new Moment("20OB", 3.9965069348506828),
            new Moment("20NF", 3.995981899282227),
            new Moment("20OF", 3.9961556775842717),
            new Moment("50NB", 3.996216019218863),
            new Moment("50OB", 3.9963679169051747),
            new Moment("50NF", 3.995996934219303),
            new Moment("50OF", 3.996205506871364),
            new Moment("100NB", 3.996124104784551),
            new Moment("100OB", 3.9959093452171075),
            new Moment("100NF", 3.9959930384825437),
            new Moment("100OF", 3.995959598265179),
            new Moment("200NB", 3.9960310553785434),
            new Moment("200OB", 3.9960341652888087),
            new Moment("200NF", 3.995735833179961),
            new Moment("200OF", 3.9958517883992393)};

        Moment[] moments3 = {new Moment("10NB", 1.1182942778749715E-4),
            new Moment("10OB", 7.079915805897146E-4),
            new Moment("10NF", 7.120320378022467E-5),
            new Moment("10OF", 2.795115203772415E-4),
            new Moment("20NB", 1.3204553614219063E-4),
            new Moment("20OB", 3.351243739922914E-4),
            new Moment("20NF", 7.342972155814742E-5),
            new Moment("20OF", 3.4341170556664125E-4),
            new Moment("50NB", 9.838621927378967E-5),
            new Moment("50OB", 3.393325849744655E-4),
            new Moment("50NF", 7.12192520343885E-5),
            new Moment("50OF", 4.459030183994032E-4),
            new Moment("100NB", 1.1162871189122359E-4),
            new Moment("100OB", 7.121189845567674E-4),
            new Moment("100NF", 1.2955088543912226E-4),
            new Moment("100OF", 4.126176018372196E-4),
            new Moment("200NB", 7.789226654477233E-5),
            new Moment("200OB", 3.609466534865228E-4),
            new Moment("200NF", 6.014132213011757E-5),
            new Moment("200OF", 3.96247707410015E-4)};

        Moment[] moments4 = {new Moment("10NB", 1.694372686216984E-4),
            new Moment("10OB", 7.026036172200706E-4),
            new Moment("10NF", 1.2183284866993791E-4),
            new Moment("10OF", 3.70855425838462E-4),
            new Moment("20NB", 2.0390510163797608E-4),
            new Moment("20OB", 3.810452335990927E-4),
            new Moment("20NF", 1.1526528680055293E-4),
            new Moment("20OF", 4.4375476546396655E-4),
            new Moment("50NB", 1.5800059062932108E-4),
            new Moment("50OB", 3.3800301177056355E-4),
            new Moment("50NF", 9.768766066278377E-5),
            new Moment("50OF", 5.354920361307537E-4),
            new Moment("100NB", 1.5456416783207522E-4),
            new Moment("100OB", 6.750647385269659E-4),
            new Moment("100NF", 1.597788522494244E-4),
            new Moment("100OF", 5.467381733048878E-4),
            new Moment("200NB", 1.2122500434211202E-4),
            new Moment("200OB", 3.7793918963927167E-4),
            new Moment("200NF", 8.129961385831164E-5),
            new Moment("200OF", 5.152750720929446E-4)};

        Moment[] moments5 = {new Moment("10NB", 2.3365433462177013E-8),
            new Moment("10OB", 4.936981391376546E-7),
            new Moment("10NF", 1.1354464117363419E-8),
            new Moment("10OF", 1.1908098471082211E-7),
            new Moment("20NB", 3.343887162474892E-8),
            new Moment("20OB", 1.3593477255625302E-7),
            new Moment("20NF", 1.0626600153781324E-8),
            new Moment("20OF", 1.732148646498937E-7),
            new Moment("50NB", 1.9714389885459866E-8),
            new Moment("50OB", 1.1410128301199254E-7),
            new Moment("50NF", 8.255115202750914E-9),
            new Moment("50OF", 2.615285003436896E-7),
            new Moment("100NB", 2.0280654602278777E-8),
            new Moment("100OB", 4.6376880810816065E-7),
            new Moment("100NF", 2.2950591285211558E-8),
            new Moment("100OF", 2.5892946914552035E-7),
            new Moment("200NB", 1.1883621044245081E-8),
            new Moment("200OB", 1.3985028684274252E-7),
            new Moment("200NF", 5.6941463367238065E-9),
            new Moment("200OF", 2.3140470686054928E-7)};

        Moment[] moments6 = {new Moment("10NB", 1.0222008592188689E-7),
            new Moment("10OB", 4.305875389566729E-7),
            new Moment("10NF", 8.092987740114042E-8),
            new Moment("10OF", 2.240387409871862E-7),
            new Moment("20NB", 1.492605479404124E-7),
            new Moment("20OB", 2.4449947431255563E-7),
            new Moment("20NF", 8.627458852978595E-8),
            new Moment("20OF", 3.163354473668976E-7),
            new Moment("50NB", 1.1293116166335181E-7),
            new Moment("50OB", 2.3515287431172888E-7),
            new Moment("50NF", 7.438057649339421E-8),
            new Moment("50OF", 3.901694416697371E-7),
            new Moment("100NB", 1.1538114985849892E-7),
            new Moment("100OB", 5.396480735947098E-7),
            new Moment("100NF", 1.2502217530768124E-7),
            new Moment("100OF", 4.2855621831070806E-7),
            new Moment("200NB", 9.43836472347792E-8),
            new Moment("200OB", 2.9862166923955016E-7),
            new Moment("200NF", 6.896756520772695E-8),
            new Moment("200OF", 4.247754830147974E-7)};

        Moment[] moments7 = {new Moment("10NB", -6.61942461792849E-9),
            new Moment("10OB", -1.3028186080093884E-7),
            new Moment("10NF", 5.377402409565932E-9),
            new Moment("10OF", -2.7161652857003516E-9),
            new Moment("20NB", -6.436455094387851E-9),
            new Moment("20OB", -4.9824898690451984E-8),
            new Moment("20NF", 4.73403393843481E-9),
            new Moment("20OF", -3.0113642029161266E-8),
            new Moment("50NB", -5.004564528254069E-9),
            new Moment("50OB", -4.1109301528235456E-8),
            new Moment("50NF", 5.273871633071361E-9),
            new Moment("50OF", 1.7849308633162623E-8),
            new Moment("100NB", -2.6210102039701045E-9),
            new Moment("100OB", -2.3875722680059103E-7),
            new Moment("100NF", 6.339016150129162E-9),
            new Moment("100OF", -1.6170352231516274E-8),
            new Moment("200NB", -5.487298428497294E-9),
            new Moment("200OB", -5.283197362565705E-8),
            new Moment("200NF", 2.735528367457574E-9),
            new Moment("200OF", 9.253215854549269E-9)};


        ArrayList<String> all = new ArrayList<String>();
        all.add(extraction(moments1, 0.0001, 0.0, 0.0001,
                Moments.getHuMoment(matrix, 1)));
        all.add(extraction(moments2, 0.0001, 0.0, 0.0001,
                Moments.getHuMoment(matrix, 2)));
        all.add(extraction(moments3, 0.0001, 0.0, 0.0001,
                Moments.getHuMoment(matrix, 3)));
        all.add(extraction(moments4, 0.0001, 0.0, 0.0001,
                Moments.getHuMoment(matrix, 4)));
        all.add(extraction(moments5, 0.0001, 0.0, 0.0001,
                Moments.getHuMoment(matrix, 5)));
        all.add(extraction(moments6, 0.0001,0.0, 0.0001,
                Moments.getHuMoment(matrix, 6)));
        all.add(extraction(moments7, 0.0001, 0.0,0.0001,
                Moments.getHuMoment(matrix, 7)));

       String mostFrequent = "";
        int frequentCount = 0;
        for (int i = 0; i < all.size(); i++) {
            String current = all.get(i);
            int count=0;

            for (int j = 0; j < all.size(); j++) {
                if(all.get(j).equals(current)) {
                    count++;
                    all.remove(all.get(j));

                  //  System.out.println(all);
                }
            }

            if (count>frequentCount) {
                frequentCount = count;
                mostFrequent = current;

            }
        }



        return getName(mostFrequent);
        /*
         for (int i = 0; i < 7; i++) {
         System.out.println(classification.Moments.getHuMoment(matrix, (i+1)));
         }*/
    }

    public class Moment {

        private String name;
        private double value;

        public Moment(String name, double value) {
            this.name = name;
            this.value = value;
        }

        public double getValue() {
            return value;
        }

        public String getName() {
            return name;
    }
    }
    private String getName(String note) {
  
          if(note.equals("10OB"))
              return "OLD R10 front view";
          else if (note.equals("10OF"))
              return "OLD R10 front view";
          else if (note.equals("10NB"))
              return "NEW R10 back view";
          else if (note.equals("10NF"))
              return "NEW R10 front view";
          else if(note.equals("20OB"))
              return "OLD R20 back view";
          else if (note.equals("20OF"))
              return "OLD R20 front view";
          else if (note.equals("20NB"))
              return "NEW R20 back view";
          else if (note.equals("20NF"))
              return "NEW R20 front view";
          else if(note.equals( "50OB"))
              return "OLD R50 back view";

          else if (note.equals("50OF"))
              return "OLD R50 front view";
          else if (note.equals("50NB"))
              return "NEW R50 back view";
          else if (note.equals("50NF"))
              return "NEW R50 front view";
          else if (note.equals("100OB"))
              return "OLD R100 back view";
          else if (note.equals("100OF"))
              return "OLD R100 front view";
          else if (note.equals("100NB"))
              return "NEW R100 back view";
          else if (note.equals("100NF"))
              return "NEW  R100 front view";
          else if (note.equals("200OB"))
              return "OLD R200 back view";
          else if (note.equals("200OF"))
              return "OLD  R200 fron view";
          else if (note.equals("200NB"))
              return "New R200 back view";
          else if (note.equals("200NF"))
              return "New R200 front view";
      
        else   return "Note could not be classified";
    }

    public String extraction(Moment[] moments, double lowerBound,
            double upperBound, double increment, double moment) {


        moments = sort(moments);


        for (int i = 0; i < moments.length; i++) {
            if (moment == moments[i].getValue()) {
              //  System.out.println("perfect match found "
              //          + moments[i].getName());
           //    clas = new Image(new File("src/imageprocessingproject/images/"+
            //            getName(moments[i].getName())+".jpg").toURI().toString());
              //  view.setImage(clas);

                return moments[i].getName();
            }
        }

        boolean found = false;
        ArrayList<String> all = new ArrayList<String>();

        while (upperBound <= lowerBound) {
            for (int i = 0; i < moments.length; i++) {
                if (moment >= moments[i].getValue() - upperBound
                        && moment <= moments[i].getValue() + upperBound) {
                  //  System.out.println("match found "
                  //          + moments[i].getName() + " offset "
                     //       + Math.abs(moments[i].getValue() - moment));
                 //   found = true;
                ///   view.setImage(clas);
              //      clas = new Image(new File("src/imageprocessingproject/images/"+
               //        getName(moments[i].getName())+".jpg").toURI().toString());
                   all.add(moments[i].getName());
                //   System.out.println(".."+moments[i].getName());
                }
            }
            upperBound += increment;
          //  System.out.println(upperBound);
        }

        // Find most frequent
        String mostFrequent = "";
        int frequentCount = 0;
        for (int i = 0; i < all.size(); i++) {
            String current = all.get(i);
            int count=0;

            for (int j = 0; j < all.size(); j++) {
                if(all.get(j).equals(current)) {
                    count++;
                    all.remove(all.get(j));

                  //  System.out.println(all);
                }
            }

            if (count>frequentCount) {
                frequentCount = count;
                mostFrequent = current;

            }
        }


       return mostFrequent;
    }

    public Moment[] sort(Moment[] list) {
        for (int i = 0; i < list.length - 1; i++) {
            double currentMin = list[i].getValue();
            Moment currentMoment = list[i];
            int currentMinIndex = i;

            for (int j = i + 1; j < list.length; j++) {
                if (currentMin > list[j].getValue()) {
                    currentMin = list[j].getValue();
                    currentMoment = list[j];
                    currentMinIndex = j;
                }
            }

            if (currentMinIndex != i) {
                list[currentMinIndex] = list[i];
                list[i] = currentMoment;
            }
        }

        return list;
    }
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else{
            double[][] d = new double[width][height];
            converToDouble(imageMatrix,d);
                                String result = featureExtraction(d);
                                JOptionPane.showMessageDialog(rootPane, result);
                                //////////////////////////////////////////////////////////
            		}
    }//GEN-LAST:event_jButton1ActionPerformed
public void dispFinds(boolean[] finsd){
    for(int i=0;i<finsd.length;i++){
        System.out.println(finsd[i]);
               
    }
       
}
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed
public static BufferedImage resizeImage(BufferedImage originalImage){
int IMG_WIDTH = 100;
	int IMG_HEIGHT = 100;
int type = originalImage.getType() == 0? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
	Graphics2D g = resizedImage.createGraphics();
	g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
	g.dispose();

	return resizedImage;
    }
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else
            		grayImage = pointDetection(grayImage);
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if(grayImage==null){
            			JOptionPane.showMessageDialog(null, "please load image first", "error infor", JOptionPane.ERROR_MESSAGE);
            		}
            		else{
            		//	Choice=0;
            			BufferedImage bim = (BufferedImage)grayImage;
            			Erosion  erode = new Erosion(1);
            			// bim = erode.apply(bim);
            			grayImage = (BufferedImage) binariseImage2(grayImage);
            			 grayImage =erode.apply(bim);;
            			 grayImage = (BufferedImage) binariseImage2(grayImage);
            		//grayImage = erosionDelationOpenClose(grayImage);
                        jButton4.setIcon(new ImageIcon(grayImage));
            		}
            		 repaint();
            		System.out.println();
    }//GEN-LAST:event_jMenuItem6ActionPerformed
	public static BufferedImage readImage(File file) { //create the buffered image\\
		BufferedImage img = null;
		try {
			img = ImageIO.read(file);//new File(file location)
		} catch (IOException e) {
			e.printStackTrace();
		}
		return img;
	}	static Image convertToGrayscale(BufferedImage image){
		BufferedImage bim = image;
		Image im;
		for(int i=0; i<bim.getWidth(); i++){
			for(int j=0; j<bim.getHeight(); j++){
				int color = bim.getRGB(i,j);
				int alpha = (color >> 24) & 255;
				int red = (color >> 16) & 255;
				int green = (color >> 8) & 255;
				int blue = (color) & 255;
				final int lum = (int)(0.2126 * red + 0.7152 * green + 0.0722 * blue);
				alpha = (alpha << 24);
				red = (lum << 16);
				green = (lum << 8);
				blue = lum;
				color = alpha + red + green + blue;
				bim.setRGB(i,j,color);
			}
		}
		im = bim;
		return im;
	}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Dilation;
    private javax.swing.JMenuItem HistEquls;
    private javax.swing.JMenuItem LBC;
    private javax.swing.JMenuItem Log;
    private javax.swing.JMenuItem Mean;
    private javax.swing.JMenuItem Median;
    private javax.swing.JMenuItem Negative;
    private javax.swing.JMenu Preprocessing;
    private javax.swing.JMenuItem Ratio;
    private javax.swing.JMenuItem Threshold;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    // End of variables declaration//GEN-END:variables

}
